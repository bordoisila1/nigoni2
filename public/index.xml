<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SB</title>
    <link>https://www.nigoni.com/</link>
    <description>Recent content on SB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2020 13:15:57 -0400</lastBuildDate>
    
	<atom:link href="https://www.nigoni.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Atomic Variables in Java</title>
      <link>https://www.nigoni.com/post/atomic-var/</link>
      <pubDate>Mon, 20 Apr 2020 13:15:57 -0400</pubDate>
      
      <guid>https://www.nigoni.com/post/atomic-var/</guid>
      <description>Atomic variables are variables that act just the way any volatile variable would work. This means, every subsequent get after a set will have the same value for all threads.
import java.util.concurrent.atomic.AtomicInteger; public class AtomicVarTest { private static AtomicInteger atomicInt = new AtomicInteger(0); public static void increment() { atomicInt.incrementAndGet(); } public static void decrement() { atomicInt.decrementAndGet(); } public static int get() { return atomicInt.get(); } public static void main(String[] args) { Thread t1 = new Thread(() -&amp;gt; { increment(); System.</description>
    </item>
    
    <item>
      <title>Volatile Keyword in Java</title>
      <link>https://www.nigoni.com/post/volatile-keyword/</link>
      <pubDate>Mon, 20 Apr 2020 10:37:36 -0400</pubDate>
      
      <guid>https://www.nigoni.com/post/volatile-keyword/</guid>
      <description>The volatile keyword in java verifies that the variable with that keyword will not be cached by a thread locally, but will be directly read from the main-memory. This means, it is a synchronized variable and at any given point of time ALL threads will see the same copy of it.
public class VolatileTest { volatile static int counter = 0; public static void main(String[] args) { Thread t1 = new Thread(() -&amp;gt; counter++); Thread t2 = new Thread(() -&amp;gt; System.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://www.nigoni.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.nigoni.com/contact/</guid>
      <description>Looking forward to hearing from you Your Name Email Address An email address is required.  Message   </description>
    </item>
    
  </channel>
</rss>