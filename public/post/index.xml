<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on SB</title>
    <link>https://www.nigoni.com/post/</link>
    <description>Recent content in Articles on SB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Apr 2020 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://www.nigoni.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multithreading in Java Series - 1</title>
      <link>https://www.nigoni.com/post/multithreading-1/</link>
      <pubDate>Mon, 20 Apr 2020 18:28:16 -0400</pubDate>
      
      <guid>https://www.nigoni.com/post/multithreading-1/</guid>
      <description>Hey everyone, this is the first of the many articles that I am about to write regarding Multithreading in Java.
What is Multithreading ? A way to have multiple threads work in your application to have maximum CPU utilization with minimum interference. Did I say that you don&amp;rsquo;t always have to make your users wait for that loooong&amp;hellip; network call ?
Why do we need Multithreading ?  Better CPU utilization Better responsiveness of the application  Types of Concurrency Models  Shared State - Well, share, share and, share.</description>
    </item>
    
    <item>
      <title>Atomic Variables in Java</title>
      <link>https://www.nigoni.com/post/atomic-var/</link>
      <pubDate>Mon, 20 Apr 2020 13:15:57 -0400</pubDate>
      
      <guid>https://www.nigoni.com/post/atomic-var/</guid>
      <description>Atomic variables are variables that act just the way any volatile variable would work. This means, every subsequent get after a set will have the same value for all threads.
import java.util.concurrent.atomic.AtomicInteger; public class AtomicVarTest { private static AtomicInteger atomicInt = new AtomicInteger(0); public static void increment() { atomicInt.incrementAndGet(); } public static void decrement() { atomicInt.decrementAndGet(); } public static int get() { return atomicInt.get(); } public static void main(String[] args) { Thread t1 = new Thread(() -&amp;gt; { increment(); System.</description>
    </item>
    
    <item>
      <title>Volatile Keyword in Java</title>
      <link>https://www.nigoni.com/post/volatile-keyword/</link>
      <pubDate>Mon, 20 Apr 2020 10:37:36 -0400</pubDate>
      
      <guid>https://www.nigoni.com/post/volatile-keyword/</guid>
      <description>The volatile keyword in java verifies that the variable with that keyword will not be cached by a thread locally, but will be directly read from the main-memory. This means, it is a synchronized variable and at any given point of time ALL threads will see the same copy of it.
public class VolatileTest { volatile static int counter = 0; public static void main(String[] args) { Thread t1 = new Thread(() -&amp;gt; counter++); Thread t2 = new Thread(() -&amp;gt; System.</description>
    </item>
    
  </channel>
</rss>